#想了解更多配置，请见wiki:
# http://wiki.babel.baidu.com/twiki/bin/view/Com/Main/Ubclient_conf

####################################
###全局配置子组名UbClientConfig
[UbClientConfig]
####################################
#配置类型; 全局配置项; 

# 0  首先尝试与galileo服务器连接，成功则获取抽象节点信息； 若与galileo服务器连接失败， 如果本地存在以前的galileo上配置的副本，
#       则用该副本启动；若不存在副本读取本地配置段[UbClientConfig.UbClient]初始化 
#       注意：与galileo服务器连接成功，但获取配置信息失败、 本地备份存在，但是加载失败都会造成启动失败，而不是用其余配置代替；
# 1 使用本地配置;
# 2 同时使用galileo资源定位和本地；先加载资源定位配置子组，再加载本地配置子组，本地里有重复资源定位上的服务，不会被加载。
# 3 同时使用galileo资源定位和本地，取资源定位上的服务器列表和本地的服务信息，整合成一个服务的完整信息后加载到内存。
#        注意，使用3时，只有load时会merge配置，资源定位reload时不会merge，会导致本地Service配置被覆盖 

#10 全部service都从naming service获取；如果存在service获取naming service失败或初始化失败的话，同时本地存在以前的naming service副本，
#      则用该副本启动，若不存在副本读取本地配置段[UbClientConfig.UbClient]
#11 使用本地配置；
#12 同时使用naming资源定位和本地；先加载资源定位配置子组，再加载本地配置子组，本地里有重复资源定位上的服务，不会被加载。

# 20 : 同时使用galieo和naming service；先从galileo获取service并加载，然后从naming service获取service；
# 21 : 本地配置，主要是与0/1/2、10/11/12保持一致，避免误配置
# 22 : 同时使用galileo、naming service和本地；先加载依赖galileo获取的资源信息、再加载从naming service获取的资源信息、最后加载本地；*/

### [UbClientConfig.Galileo]是使用galileo资源定位的配置子组，[UbClientConfig.Naming]是使用naming service资源定位的配置子组，[UbClientConfig.UbClient]是本地配置service的配置子组
###不设置，使用本地配置 
#**************必须配置项
ConfType : 1 

# 1.2.21.1版本之后ubclient初始化时启动一个健康检查线程，如下配置项 HealthyCheckSleepTime 用于设置两次检查见的sleep时间： 
#默认是5000ms，单位是ms
HealthyCheckSleepTime : 5000
####################################
#事件模型配置 
[.Reactor] 
#内部工作线程，建议与cpu 核数相当 
ThreadNum : 10
#epoll wait的timeout时间(ms)，过大会导致网络IO响应延迟，建议使用1
CheckTime : 10

####################################
###当使用本地配置时，需要配置[.UbClient]子组
[.UbClient] 
#请求的服务信息，对应一个后端服务，Name不可缺少 
[..@Service] 
#服务名，不可缺省 
#**************必须配置项
Name : rstree

#####以下为Service的默认配置项(DefaultXXX)。Server配置段可以设置自己的配置项XXX来覆盖DefaultXXX的值；更多详见如下配置
##比如DefaultPort配置为8100，如果Server配置Port为6662，那么此server的端口就是6662；
#**************必须配置项; 默认端口，Service的DefaultPort和Server的Port必须配置一种，否则启动失败
DefaultPort : 22112
#默认的连接超时(ms)，不配置的话使用默认值100ms
DefaultConnectTimeOut : 5000
#默认的读超时(ms)，不配置的话使用默认值500ms
DefaultReadTimeOut : 100000 
#默认的写超时(ms) , 不配置的话使用默认值500ms
DefaultWriteTimeOut : 10000 
### client端与service下每个server保持的最大连接数，一定不要误解是client与service下所有server的总连接数的最大值；
#默认与每个server的最大连接数, 不配置的话使用默认值50
DefaultMaxConnect : 1 
#0：不设置; 其余 : 设置linger ；不配值时使用默认值0
DefaultLinger : 0 
#异步通信时内部等待队列长度，使用common接口进行非异步通信时，请务必将该值设置为0，否则可能影响性能
DefaultAsyncWaitingNum : 80 

#####以下两个配置项Server不支持，即只能在Service上配置，对所有的Server生效 
#LONG / SHORT 其余设置默认使用短连接 
DefaultConnectType : SHORT
#根据负载均衡策略重试DefaultRetry次选择此service下的server，直到选择到的server可以正常建立链接；
#默认重试次数，1表示不重试，2表示重试1次，类推 ；不配置时使用默认值5；
DefaultRetry : 5 
#当从Server获取连接时，Server达到最大连接上限，此时会根据DefaultFetchConnMaxTime配置项，再DefaultFetchConnMaxTime时间内会每sleep 1ms再尝试与此server建立链接；
#单位是ms
DefaultFetchConnMaxTime : 0 
#0 : 不连接；其余 ：启动时与每个server建立其MaxConnect链接数
ConnectAll : 0 

#指定要使用的负载均衡策略类
##应用程序调用通信接口与某个Service通信，ub内部首先通过配置的负载均衡策略选择Service下的某个Server，然后与Server中的IP建立链接
###（配置为长链接的话下首先check是否有可用的长连接，如果有的话就使用），然后进行发送请求并接受responce，通信结束；
##若不为空，ClassName不可缺少；为空，1.2.21.1版本前默认使用UbClientStrategy，1.2.21.1版本之后默认使用UbClientStrategyWithHealthy;
[...CurrStrategy]
ClassName : UbClientStrategyWithHealthy

#指定要使用的健康检查类
#若不为空，ClassName不可缺少；为空，默认使用UbClientHealthyChecker，检查非健康Server，可以连接了置回健康状态
[...CurrHealthy]
ClassName : UbClientHealthyChecker

#后端服务器配置

[...@Server]
#支持配置多个IP，IP间空格分离，比如 IP : 123.0.8.9 38.98.87.7
##上游策略是选择某个Server，当选择到一个Server时，循环与IP列表中的IP建立链接直到链接成功或IP列表遍历完毕；
###使用场景：1.某个机器有多个IP；2.某个模块主备部署在不同机器，只有一个主正常接受服务；
#IP   :  127.0.0.1
#orcp线上机器
#IP  :   10.195.151.26
#物理机
IP  :   10.48.118.41
Port  :    22112
#Port :  2000 
#Port  :  6662

#[...@Server]
#没有配置Port、ConnectTimeOut、ReadTimeOut等的值将使用serivce的配置项DefaultXXX
#IP   :  127.0.0.2

####################################
###当使用naming service资源定位时请配置如下子组Naming
#[.Naming]
#DIR : ./conf/
#FILE : naming_back.conf
#WebfootQueryTimeout: 120
#SeviceSynInterval : 300
  
#[..@Service]
#Name : noah_zeus
#在naming service处的唯一标识名字
#WebfootServiceName: jx.noah.zeus   
#DefaultConnectTimeOut : 200
#DefaultReadTimeOut : 5000000
#DefaultWriteTimeOut : 5000000
#[...CurrStrategy]
#ClassName : UbClientStrategyWithHealthy

####################################
###当使用galileo资源定位时请配置如下子组Galileo
#[.Galileo] 
#galileo集群
#GALILEO_HOST  :  db-passport-test05.vm:2181,db-passport-test01.db01:2181
#GALILEO_DATA_PACK_SIZE  :  131072

#GALILEO_ZOO_LOG : ./log/zoo.pspui.log

#DIR : ./conf/
#FILE : galileo-back.conf

#[..REQUEST_RESOURCE]
# 每个服务对应的配置项
#[...@RES_ARR]
# 服务名称，必须有，NAME必须是全局唯一的名字
#NAME  :  service1
# 服务在 galileo 上的完整注册路径，如/baidu/ns/passport/logic/clogin
# 可以多个Name对应同一个ADDR
#ADDR  :  /as_node20

#[...@RES_ARR]
#NAME  :  service2
#ADDR  :  /as_node20

# 注册资源
#[..REGISTER_RESOURCE]
#[...@RES_ARR]
#向galileo注册资源的抽象节点地址
#ADDR :  /baidu/ns/passport/logic/a 
# 实体节点数据，注意，注册机的IP会自动添加在DATA里的IP字段
#DATA : {"name":"ns_imbs01", "ip":"10.26.23.28", "Port":1942, "Linger":1, "MaxConnect":10000,"Retry":2}
